@page "/login"
@using LCMSMSPWA.Auth
@inject IAccountsRepository AccountsRepository
@inject NavigationManager NavigationManager
@inject ILoginService LoginService

<h3>Login</h3>

<!-- login component -->
<div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 flex flex-col w-4/12 justify-center">
    <EditForm Model="@userInfo" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <div class="mb-4">
            <label class="block text-grey-darker text-sm font-bold mb-2" for="username">
                Username
            </label>
            <InputText @bind-Value="userInfo.Email" class="shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker" id="username" type="text" placeholder="Username" />
            <ValidationMessage For="@(() => userInfo.Email)" />
        </div>
        <div class="mb-6">
            <label class="block text-grey-darker text-sm font-bold mb-2" for="password">
                Password
            </label>
            <InputPassword @bind-Value="userInfo.Password" class="shadow appearance-none border border-red rounded w-full py-2 px-3 text-grey-darker mb-3" id="password" type="password" placeholder="******************" />
            <ValidationMessage For="@(() => userInfo.Password)" />
        </div>
        <div class="flex items-center justify-between">
            <button class="bg-blue hover:bg-blue-dark text-white font-bold py-2 px-4 rounded" type="submit">
                Sign In
            </button>
        </div>
    </EditForm>
</div>

@code {
    private UserInfo userInfo = new UserInfo();

    private async Task HandleValidSubmit()
    {
        var userToken = await AccountsRepository.Login(userInfo);
        await LoginService.Login(userToken);
        NavigationManager.NavigateTo("/");
    }
}