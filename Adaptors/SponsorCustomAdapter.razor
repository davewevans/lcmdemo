@using Microsoft.AspNetCore.Components
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks

@inherits DataAdaptor<ISponsorRepository>

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>


@code {
  
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public List<Sponsor> Sponsors { get; set; }
    
    bool gridInitialized = false; 
    
    public override async Task<object> ReadAsync(DataManagerRequest dm, string key = null)
    {   
        if (!gridInitialized)
        {
            // Get data from API
            Sponsors = await Service.GetSponsorsAsync();        
            gridInitialized = true;            
        }   
        
        await Task.Yield();  
        IEnumerable<Sponsor> dataSource = Sponsors; 

        if (dm.Search != null && dm.Search.Count > 0)
        {
            // Searching
            dataSource = DataOperations.PerformSearching(dataSource, dm.Search);
        }
        if (dm.Sorted != null && dm.Sorted.Count > 0)
        {
            // Sorting
            dataSource = DataOperations.PerformSorting(dataSource, dm.Sorted);
        }
        if (dm.Where != null && dm.Where.Count > 0)
        {
            // Filtering
            dataSource = DataOperations.PerformFiltering(dataSource, dm.Where, dm.Where[0].Operator);
        }    

        int count = dataSource.Cast<Sponsor>().Count();

        if (dm.Skip != 0)
        {
            dataSource = dataSource.Skip(dm.Skip); //Paging
        }       
    
        if (dm.Take != 0)
        {               
            dataSource = dataSource.Take(dm.Take);
        }
        
        return dm.RequiresCounts ? new DataResult() { Result = dataSource, Count = count } : (object)dataSource;
    }  

    public override async Task<object> InsertAsync(DataManager dm, object value, string key)
    {
        var sponsor = value as Sponsor;
        if (sponsor == null) return value;

        var newSponsor = new SponsorCreation
        {
            FirstName = sponsor.FirstName,
            LastName = sponsor.LastName,
            Address = sponsor.Address,
            City = sponsor.City,
            State = sponsor.State,
            ZipCode = sponsor.ZipCode,
            Email = sponsor.Email,
            MainPhone = sponsor.MainPhone
        };
       
        await Service.AddSponsorAsync(newSponsor);
        Sponsors?.Insert(0, sponsor);
        return value;
    }   

    public override async Task<object> UpdateAsync(DataManager dm, object value, string keyField, string key)
    {
        var sponsor = (value as Sponsor);
        if (sponsor == null) return value;
        
        var sponsorEdit = new SponsorEdit
        {
            FirstName = sponsor.FirstName,
            LastName = sponsor.LastName,
            Address = sponsor.Address,
            City = sponsor.City,
            State = sponsor.State,
            ZipCode = sponsor.ZipCode,
            Email = sponsor.Email,
            MainPhone = sponsor.MainPhone
        };

        // So the record in the grid will immediately update
        var sponsorFromCache = Sponsors.FirstOrDefault(s => s.SponsorID == sponsor.SponsorID);
        if (sponsorFromCache != null)
        {
            sponsorFromCache.FirstName = sponsor.FirstName;
            sponsorFromCache.LastName = sponsor.LastName;
            sponsorFromCache.Address = sponsor.Address;
            sponsorFromCache.City = sponsor.City;
            sponsorFromCache.State = sponsor.State;
            sponsorFromCache.ZipCode = sponsor.ZipCode;
            sponsorFromCache.Email = sponsor.Email;
            sponsorFromCache.MainPhone = sponsor.MainPhone;
        }
        
        await Service.UpdateSponsorAsync(sponsor.SponsorID, sponsorEdit);
        return value;
    }  

    public override async Task<object> RemoveAsync(DataManager dm, object value, string keyField, string key)
    {            
        int sponsorId;  
        if (int.TryParse(value.ToString(), out sponsorId)) {
            await Service.DeleteSponsorAsync(sponsorId);
            var sponsorToDelete = Sponsors.FirstOrDefault(x => x.SponsorID == sponsorId);
            Sponsors.Remove(sponsorToDelete);
        }       
        return value;
    }  

}