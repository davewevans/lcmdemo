@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons

<SfDialog Width="400px" @bind-Visible="@IsVisible" IsModal="true" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            <h3 class="text-3xl font-semibold">Edit Narration Record</h3>
        </Header>
        <Content>
            <div class="w-full m-6">
                <EditForm Model="NarrationRecord" OnValidSubmit="HandleValidSubmit" class="w-full max-w-lg">
                    <DataAnnotationsValidator/>

                    <!-- Subject -->
                    <div class="w-11/12 px-3 mb-6">
                        <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="subject">
                            Subject
                        </label>
                        <InputText id="subject" class="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" @bind-Value="NarrationRecord.Subject"/>
                        <ValidationMessage For="@(() => NarrationRecord.Subject)"/>
                    </div>

                    <!-- Note -->
                    <div style="height:400px;">
                        <div class="w-11/12 h-full px-3 mb-6">
                            <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="note">
                                Note
                            </label>
                            <InputTextArea id="note" class="appearance-none block w-full h-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" @bind-Value="NarrationRecord.Note"/>
                            <ValidationMessage For="@(() => NarrationRecord.Note)"/>
                        </div>
                    </div>

                </EditForm>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton OnClick="@HandleValidSubmit">
            <DialogButtonModel Content="Save" IsPrimary="true"></DialogButtonModel>
        </DialogButton>
        <DialogButton OnClick="@OnCancelBtnClick">
            <DialogButtonModel Content="Cancel"></DialogButtonModel>
        </DialogButton>
    </DialogButtons>
</SfDialog>


<style>
    .e-btn.e-flat.e-primary, .e-btn.e-flat.e-primary:focus {
        background-color: #317ab9;
        border-color: #265f91;
        color: #fff;
    }

    .e-btn.e-flat.e-primary:hover, .e-btn.e-flat.e-primary:active {
        background-color: #21527d;
        border-color: #163854;
        color: #fff;
    }
</style>

@code {

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public NarrationEdit NarrationRecord { get; set; }

    [Parameter]
    public int NarrationId { get; set; }

    [Parameter]
    public EventCallback<bool> OnEditComplete { get; set; }

    [Inject]
    public INarrationRepository NarrationRepository { get; set; }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Inject]
    protected IMatToaster Toaster { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
    // Focus the element
            await JSRuntime.FocusInput("subject");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (NarrationRecord == null)
        {
            Toaster.Add($" No Narration record found.", MatToastType.Danger);
            return;
        }

        await NarrationRepository.UpdateNarrationAsync(NarrationId, NarrationRecord);
        IsVisible = false;
        await OnEditComplete.InvokeAsync(true);
        StateHasChanged();
        Toaster.Add($" Record updated successfully!", MatToastType.Success);
    }

    private async Task OnCancelBtnClick()
    {
        IsVisible = false;
        await OnEditComplete.InvokeAsync(false);
    }

}